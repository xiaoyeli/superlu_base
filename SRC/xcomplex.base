/*! \file
Copyright (c) 2003, The Regents of the University of California, through
Lawrence Berkeley National Laboratory (subject to receipt of any required 
approvals from U.S. Dept. of Energy) 

All rights reserved. 

The source code is distributed under BSD license, see the file License.txt
at the top-level directory.
*/
@extract -b Typedef.inc
/*! @file @(mod_pre)complex.c
 * \brief Common arithmetic for complex type
 *
 * <pre>
 * -- SuperLU routine (version 2.0) --
 * Univ. of California Berkeley, Xerox Palo Alto Research Center,
 * and Lawrence Berkeley National Lab.
 * November 15, 1997
 *
 * This file defines common arithmetic operations for complex type.
 * </pre>
 */

#include <math.h>
#include <stdlib.h>
#include <stdio.h>
#include "slu_@(mod_pre)complex.h"


/*! \brief Complex Division c = a/b */
void @(pre)_div(@(type) *c, @(type) *a, @(type) *b)
{
    @(mod_type) ratio, den;
    @(mod_type) abr, abi, cr, ci;
  
    if( (abr = b->r) < 0.)
	abr = - abr;
    if( (abi = b->i) < 0.)
	abi = - abi;
    if( abr <= abi ) {
	if (abi == 0) {
	    fprintf(stderr, "z_div.c: division by zero\n");
            exit(-1);
	}	  
	ratio = b->r / b->i ;
	den = b->i * (1 + ratio*ratio);
	cr = (a->r*ratio + a->i) / den;
	ci = (a->i*ratio - a->r) / den;
    } else {
	ratio = b->i / b->r ;
	den = b->r * (1 + ratio*ratio);
	cr = (a->r + a->i*ratio) / den;
	ci = (a->i - a->r*ratio) / den;
    }
    c->r = cr;
    c->i = ci;
}


/*! \brief Returns sqrt(z.r^2 + z.i^2) */
double @(pre)_abs(@(type) *z)
{
    @(mod_type) temp;
    @(mod_type) real = z->r;
    @(mod_type) imag = z->i;

    if (real < 0) real = -real;
    if (imag < 0) imag = -imag;
    if (imag > real) {
	temp = real;
	real = imag;
	imag = temp;
    }
    if ((real+imag) == real) return(real);
  
    temp = imag/real;
    temp = real*sqrt(1.0 + temp*temp);  /*overflow!!*/
    return (temp);
}


/*! \brief Approximates the abs. Returns abs(z.r) + abs(z.i) */
double @(pre)_abs1(@(type) *z)
{
    @(mod_type) real = z->r;
    @(mod_type) imag = z->i;
  
    if (real < 0) real = -real;
    if (imag < 0) imag = -imag;

    return (real + imag);
}

/*! \brief Return the exponentiation */
void @(pre)_exp(@(type) *r, @(type) *z)
{
    @(mod_type) expx;

    expx = exp(z->r);
    r->r = expx * cos(z->i);
    r->i = expx * sin(z->i);
}

/*! \brief Return the complex conjugate */
@precision SCOMPLEX
void r_cnjg(@(type) *r, @(type) *z)
@precision DCOMPLEX
void d_cnjg(@(type) *r, @(type) *z)
@precision !
{
    r->r = z->r;
    r->i = -z->i;
}

/*! \brief Return the imaginary part */
@precision SCOMPLEX
double r_imag(@(type) *z)
@precision DCOMPLEX
double d_imag(@(type) *z)
@precision !
{
    return (z->i);
}


/*! \brief SIGN functions for complex number. Returns z/abs(z) */
@(type) @(pre)_sgn(@(type) *z)
{
    register @(mod_type) t = @(pre)_abs(z);
    register @(type) retval;

    if (t == 0.0) {
	retval.r = 1.0, retval.i = 0.0;
    } else {
	retval.r = z->r / t, retval.i = z->i / t;
    }

    return retval;
}

/*! \brief Square-root of a complex number. */
@(type) @(pre)_sqrt(@(type) *z)
{
    @(type) retval;
    register @(mod_type) cr, ci, real, imag;

    real = z->r;
    imag = z->i;

    if ( imag == 0.0 ) {
        retval.r = sqrt(real);
        retval.i = 0.0;
    } else {
        ci = (sqrt(real*real + imag*imag) - real) / 2.0;
        ci = sqrt(ci);
        cr = imag / (2.0 * ci);
        retval.r = cr;
        retval.i = ci;
    }

    return retval;
}


@precision REPLACED_BY_MACRO

/*! \brief Complex Addition c = a + b */
void @(pre)_add(@(type) *c, @(type) *a, @(type) *b)
{
    c->r = a->r + b->r;
    c->i = a->i + b->i;
}

/*! \brief Complex Subtraction c = a - b */
void @(pre)_sub(@(type) *c, @(type) *a, @(type) *b)
{
    c->r = a->r - b->r;
    c->i = a->i - b->i;
}

/*! \brief Complex-Double Multiplication */
void @(pre)@(mod_pre)_mult(@(type) *c, @(type) *a, @(mod_type) *b)
{
    c->r = (a->r * *b);
    c->i = (a->i * *b);
}

/*! \brief Complex-Complex Multiplication */
void @(pre)@(pre)_mult(@(type) *c, @(type) *a, @(type) *b)
{
    @(mod_type) cr, ci;
    cr = a->r * b->r - a->i * b->i;
    ci = a->i * b->r + a->r * b->i;
    c->r = cr;
    c->i = ci;
}

/*! \brief Returns 1 if *a == *b */
int @(pre)_eq(@(type) *a, @(type) *b)
{
    return ( (a->r == b->r) &&  (a->i == b->i) );
}

@precision !

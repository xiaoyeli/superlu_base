/*! \file
Copyright (c) 2003, The Regents of the University of California, through
Lawrence Berkeley National Laboratory (subject to receipt of any required 
approvals from U.S. Dept. of Energy) 

All rights reserved. 

The source code is distributed under BSD license, see the file License.txt
at the top-level directory.
*/
@extract -b Typedef.inc
/*! @file slu_@(pre)defs.h
 * \brief Header file for real operations
 * 
 * <pre> 
 * -- SuperLU routine (version 4.1) --
 * Univ. of California Berkeley, Xerox Palo Alto Research Center,
 * and Lawrence Berkeley National Lab.
 * November, 2010
 * 
 * Global data structures used in LU factorization -
 * 
 *   nsuper: #supernodes = nsuper + 1, numbered [0, nsuper].
 *   (xsup,supno): supno[i] is the supernode no to which i belongs;
 *	xsup(s) points to the beginning of the s-th supernode.
 *	e.g.   supno 0 1 2 2 3 3 3 4 4 4 4 4   (n=12)
 *	        xsup 0 1 2 4 7 12
 *	Note: dfs will be performed on supernode rep. relative to the new 
 *	      row pivoting ordering
 *
 *   (xlsub,lsub): lsub[*] contains the compressed subscript of
 *	rectangular supernodes; xlsub[j] points to the starting
 *	location of the j-th column in lsub[*]. Note that xlsub 
 *	is indexed by column.
 *	Storage: original row subscripts
 *
 *      During the course of sparse LU factorization, we also use
 *	(xlsub,lsub) for the purpose of symmetric pruning. For each
 *	supernode {s,s+1,...,t=s+r} with first column s and last
 *	column t, the subscript set
 *		lsub[j], j=xlsub[s], .., xlsub[s+1]-1
 *	is the structure of column s (i.e. structure of this supernode).
 *	It is used for the storage of numerical values.
 *	Furthermore,
 *		lsub[j], j=xlsub[t], .., xlsub[t+1]-1
 *	is the structure of the last column t of this supernode.
 *	It is for the purpose of symmetric pruning. Therefore, the
 *	structural subscripts can be rearranged without making physical
 *	interchanges among the numerical values.
 *
 *	However, if the supernode has only one column, then we
 *	only keep one set of subscripts. For any subscript interchange
 *	performed, similar interchange must be done on the numerical
 *	values.
 *
 *	The last column structures (for pruning) will be removed
 *	after the numercial LU factorization phase.
 *
 *   (xlusup,lusup): lusup[*] contains the numerical values of the
 *	rectangular supernodes; xlusup[j] points to the starting
 *	location of the j-th column in storage vector lusup[*]
 *	Note: xlusup is indexed by column.
 *	Each rectangular supernode is stored by column-major
 *	scheme, consistent with Fortran 2-dim array storage.
 *
 *   (xusub,ucol,usub): ucol[*] stores the numerical values of
 *	U-columns outside the rectangular supernodes. The row
 *	subscript of nonzero ucol[k] is stored in usub[k].
 *	xusub[i] points to the starting location of column i in ucol.
 *	Storage: new row subscripts; that is subscripts of PA.
 * </pre>
 */
#ifndef __SUPERLU_@(pre)SP_DEFS /* allow multiple inclusions */
#define __SUPERLU_@(pre)SP_DEFS

/*
 * File name:		@(pre)sp_defs.h
 * Purpose:             Sparse matrix types and function prototypes
 * History:
 */

#ifdef _CRAY
#include <fortran.h>
#endif

/* Define my integer type int_t */
typedef int int_t; /* default */

#include <math.h>
#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include "slu_Cnames.h"
#include "supermatrix.h"
#include "slu_util.h"
@precision DCOMPLEX SCOMPLEX
#include "slu_@(mod_pre)complex.h"
@precision !


/* -------- Prototypes -------- */

#ifdef __cplusplus
extern "C" {
#endif

/*! \brief Driver routines */
extern void
@(pre)gssv(superlu_options_t *, SuperMatrix *, int *, int *, SuperMatrix *,
      SuperMatrix *, SuperMatrix *, SuperLUStat_t *, int *);
extern void
@(pre)gssvx(superlu_options_t *, SuperMatrix *, int *, int *, int *,
       char *, @(mod_type) *, @(mod_type) *, SuperMatrix *, SuperMatrix *,
       void *, int, SuperMatrix *, SuperMatrix *,
       @(mod_type) *, @(mod_type) *, @(mod_type) *, @(mod_type) *,
       GlobalLU_t *, mem_usage_t *, SuperLUStat_t *, int *);
    /* ILU */
extern void
@(pre)gsisv(superlu_options_t *, SuperMatrix *, int *, int *, SuperMatrix *,
      SuperMatrix *, SuperMatrix *, SuperLUStat_t *, int *);
extern void
@(pre)gsisx(superlu_options_t *, SuperMatrix *, int *, int *, int *,
       char *, @(mod_type) *, @(mod_type) *, SuperMatrix *, SuperMatrix *,
       void *, int, SuperMatrix *, SuperMatrix *, @(mod_type) *, @(mod_type) *,
       GlobalLU_t *, mem_usage_t *, SuperLUStat_t *, int *);


/*! \brief Supernodal LU factor related */
extern void
@(pre)Create_CompCol_Matrix(SuperMatrix *, int, int, int, @(type) *,
		       int *, int *, Stype_t, Dtype_t, Mtype_t);
extern void
@(pre)Create_CompRow_Matrix(SuperMatrix *, int, int, int, @(type) *,
		       int *, int *, Stype_t, Dtype_t, Mtype_t);
extern void
@(pre)Copy_CompCol_Matrix(SuperMatrix *, SuperMatrix *);
extern void
@(pre)Create_Dense_Matrix(SuperMatrix *, int, int, @(type) *, int,
		     Stype_t, Dtype_t, Mtype_t);
extern void
@(pre)Create_SuperNode_Matrix(SuperMatrix *, int, int, int, @(type) *, 
		         int *, int *, int *, int *, int *,
			 Stype_t, Dtype_t, Mtype_t);
extern void
@(pre)Copy_Dense_Matrix(int, int, @(type) *, int, @(type) *, int);

extern void    countnz (const int, int *, int *, int *, GlobalLU_t *);
extern void    ilu_countnz (const int, int *, int *, GlobalLU_t *);
extern void    fixupL (const int, const int *, GlobalLU_t *);

extern void    @(pre)allocateA (int, int, @(type) **, int **, int **);
extern void    @(pre)gstrf (superlu_options_t*, SuperMatrix*,
                       int, int, int*, void *, int, int *, int *, 
                       SuperMatrix *, SuperMatrix *, GlobalLU_t *,
		       SuperLUStat_t*, int *);
extern int     @(pre)snode_dfs (const int, const int, const int *, const int *,
			     const int *, int *, int *, GlobalLU_t *);
extern int     @(pre)snode_bmod (const int, const int, const int, @(type) *,
                              @(type) *, GlobalLU_t *, SuperLUStat_t*);
extern void    @(pre)panel_dfs (const int, const int, const int, SuperMatrix *,
			   int *, int *, @(type) *, int *, int *, int *,
			   int *, int *, int *, int *, GlobalLU_t *);
extern void    @(pre)panel_bmod (const int, const int, const int, const int,
                           @(type) *, @(type) *, int *, int *,
			   GlobalLU_t *, SuperLUStat_t*);
extern int     @(pre)column_dfs (const int, const int, int *, int *, int *, int *,
			   int *, int *, int *, int *, int *, GlobalLU_t *);
extern int     @(pre)column_bmod (const int, const int, @(type) *,
			   @(type) *, int *, int *, int,
                           GlobalLU_t *, SuperLUStat_t*);
extern int     @(pre)copy_to_ucol (int, int, int *, int *, int *,
                              @(type) *, GlobalLU_t *);         
extern int     @(pre)pivotL (const int, const double, int *, int *, 
                         int *, int *, int *, GlobalLU_t *, SuperLUStat_t*);
extern void    @(pre)pruneL (const int, const int *, const int, const int,
			  const int *, const int *, int *, GlobalLU_t *);
extern void    @(pre)readmt (int *, int *, int *, @(type) **, int **, int **);
extern void    @(pre)GenXtrue (int, int, @(type) *, int);
extern void    @(pre)FillRHS (trans_t, int, @(type) *, int, SuperMatrix *,
			  SuperMatrix *);
extern void    @(pre)gstrs (trans_t, SuperMatrix *, SuperMatrix *, int *, int *,
                        SuperMatrix *, SuperLUStat_t*, int *);
/* ILU */
extern void    @(pre)gsitrf (superlu_options_t*, SuperMatrix*, int, int, int*,
		        void *, int, int *, int *, SuperMatrix *, SuperMatrix *,
                        GlobalLU_t *, SuperLUStat_t*, int *);
extern int     @(pre)ldperm(int, int, int, int [], int [], @(type) [],
                        int [],	@(mod_type) [], @(mod_type) []);
extern int     ilu_@(pre)snode_dfs (const int, const int, const int *, const int *,
			       const int *, int *, GlobalLU_t *);
extern void    ilu_@(pre)panel_dfs (const int, const int, const int, SuperMatrix *,
			       int *, int *, @(type) *, @(mod_type) *, int *, int *,
			       int *, int *, int *, int *, GlobalLU_t *);
extern int     ilu_@(pre)column_dfs (const int, const int, int *, int *, int *,
				int *, int *, int *, int *, int *,
				GlobalLU_t *);
extern int     ilu_@(pre)copy_to_ucol (int, int, int *, int *, int *,
                                  @(type) *, int, milu_t, double, int,
                                  @(type) *, int *, GlobalLU_t *, @(mod_type) *);
extern int     ilu_@(pre)pivotL (const int, const double, int *, int *, int, int *,
			    int *, int *, int *, double, milu_t,
                            @(type), GlobalLU_t *, SuperLUStat_t*);
extern int     ilu_@(pre)drop_row (superlu_options_t *, int, int, double,
                              int, int *, double *, GlobalLU_t *, 
                              @(mod_type) *, @(mod_type) *, int);


/*! \brief Driver related */

extern void    @(pre)gsequ (SuperMatrix *, @(mod_type) *, @(mod_type) *, @(mod_type) *,
			@(mod_type) *, @(mod_type) *, int *);
extern void    @(pre)laqgs (SuperMatrix *, @(mod_type) *, @(mod_type) *, @(mod_type),
                        @(mod_type), @(mod_type), char *);
extern void    @(pre)gscon (char *, SuperMatrix *, SuperMatrix *, 
		         @(mod_type), @(mod_type) *, SuperLUStat_t*, int *);
extern @(mod_type)   @(pre)PivotGrowth(int, SuperMatrix *, int *, 
                            SuperMatrix *, SuperMatrix *);
extern void    @(pre)gsrfs (trans_t, SuperMatrix *, SuperMatrix *,
                       SuperMatrix *, int *, int *, char *, @(mod_type) *, 
                       @(mod_type) *, SuperMatrix *, SuperMatrix *,
                       @(mod_type) *, @(mod_type) *, SuperLUStat_t*, int *);

extern int     sp_@(pre)trsv (char *, char *, char *, SuperMatrix *,
			SuperMatrix *, @(type) *, SuperLUStat_t*, int *);
extern int     sp_@(pre)gemv (char *, @(type), SuperMatrix *, @(type) *,
			int, @(type), @(type) *, int);

extern int     sp_@(pre)gemm (char *, char *, int, int, int, @(type),
			SuperMatrix *, @(type) *, int, @(type), 
			@(type) *, int);
extern         @(mod_type) @(mod_pre)mach(char *);   /* from C99 standard, in float.h */

/*! \brief Memory-related */
extern int     @(pre)LUMemInit (fact_t, void *, int, int, int, int, int,
                            @(mod_type), SuperMatrix *, SuperMatrix *,
                            GlobalLU_t *, int **, @(type) **);
extern void    @(pre)SetRWork (int, int, @(type) *, @(type) **, @(type) **);
extern void    @(pre)LUWorkFree (int *, @(type) *, GlobalLU_t *);
extern int     @(pre)LUMemXpand (int, int, MemType, int *, GlobalLU_t *);

extern @(type)  *@(type)Malloc(int);
extern @(type)  *@(type)Calloc(int);
@precision SCOMPLEX
extern float  *floatMalloc(int);
extern float  *floatCalloc(int);
@precision DCOMPLEX
extern double  *doubleMalloc(int);
extern double  *doubleCalloc(int);
@precision !
extern int     @(pre)memory_usage(const int, const int, const int, const int);
extern int     @(pre)QuerySpace (SuperMatrix *, SuperMatrix *, mem_usage_t *);
extern int     ilu_@(pre)QuerySpace (SuperMatrix *, SuperMatrix *, mem_usage_t *);

/*! \brief Auxiliary routines */
extern void    @(pre)readhb(FILE *, int *, int *, int *, @(type) **, int **, int **);
extern void    @(pre)readrb(int *, int *, int *, @(type) **, int **, int **);
extern void    @(pre)readtriple(int *, int *, int *, @(type) **, int **, int **);
extern void    @(pre)CompRow_to_CompCol(int, int, int, @(type)*, int*, int*,
		                   @(type) **, int **, int **);
extern void    @(pre)fill (@(type) *, int, @(type));
extern void    @(pre)inf_norm_error (int, SuperMatrix *, @(type) *);
extern @(mod_type)  @(mod_pre)qselect(int, @(mod_type) *, int);


/*! \brief Routines for debugging */
extern void    @(pre)Print_CompCol_Matrix(char *, SuperMatrix *);
extern void    @(pre)Print_SuperNode_Matrix(char *, SuperMatrix *);
extern void    @(pre)Print_Dense_Matrix(char *, SuperMatrix *);
extern void    @(pre)print_lu_col(char *, int, int, int *, GlobalLU_t *);
extern int     print_double_vec(char *, int, double *);
extern void    @(pre)check_tempv(int, @(type) *);

/*! \brief BLAS */

extern int @(pre)gemm_(const char*, const char*, const int*, const int*, const int*,
                  const @(type)*, const @(type)*, const int*, const @(type)*,
		  const int*, const @(type)*, @(type)*, const int*);
extern int @(pre)trsv_(char*, char*, char*, int*, @(type)*, int*,
                  @(type)*, int*);
extern int @(pre)trsm_(char*, char*, char*, char*, int*, int*,
                  @(type)*, @(type)*, int*, @(type)*, int*);
extern int @(pre)gemv_(char *, int *, int *, @(type) *, @(type) *a, int *,
                  @(type) *, int *, @(type) *, @(type) *, int *);

#ifdef __cplusplus
  }
#endif

#endif /* __SUPERLU_@(pre)SP_DEFS */


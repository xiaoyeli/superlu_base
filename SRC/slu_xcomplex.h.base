/*! \file
Copyright (c) 2003, The Regents of the University of California, through
Lawrence Berkeley National Laboratory (subject to receipt of any required 
approvals from U.S. Dept. of Energy) 

All rights reserved. 

The source code is distributed under BSD license, see the file License.txt
at the top-level directory.
*/
@extract -b Typedef.inc
/*! @file slu_@(mod_pre)complex.h
 * \brief Header file for complex operations
 * <pre> 
 *  -- SuperLU routine (version 2.0) --
 * Univ. of California Berkeley, Xerox Palo Alto Research Center,
 * and Lawrence Berkeley National Lab.
 * November 15, 1997
 *
 * Contains definitions for various complex operations.
 * This header file is to be included in source files @(pre)*.c
 * </pre>
 */
#ifndef __SUPERLU_@(MOD_PRE)COMPLEX /* allow multiple inclusions */
#define __SUPERLU_@(MOD_PRE)COMPLEX


#ifndef @(MOD_PRE)COMPLEX_INCLUDE
#define @(MOD_PRE)COMPLEX_INCLUDE

typedef struct { @(mod_type) r, i; } @(type);


/* Macro definitions */

/*! \brief Complex Addition c = a + b */
#define @(pre)_add(c, a, b) { (c)->r = (a)->r + (b)->r; \
			 (c)->i = (a)->i + (b)->i; }

/*! \brief Complex Subtraction c = a - b */
#define @(pre)_sub(c, a, b) { (c)->r = (a)->r - (b)->r; \
			 (c)->i = (a)->i - (b)->i; }

/*! \brief Complex-Double Multiplication */
#define @(pre)@(mod_pre)_mult(c, a, b) { (c)->r = (a)->r * (b); \
                           (c)->i = (a)->i * (b); }

/*! \brief Complex-Complex Multiplication */
#define @(pre)@(pre)_mult(c, a, b) { \
	@(mod_type) cr, ci; \
    	cr = (a)->r * (b)->r - (a)->i * (b)->i; \
    	ci = (a)->i * (b)->r + (a)->r * (b)->i; \
    	(c)->r = cr; \
    	(c)->i = ci; \
    }

#define @(pre)@(pre)_conj(a, b) { \
        (a)->r = (b)->r; \
        (a)->i = -((b)->i); \
    }

/*! \brief Complex equality testing */
#define @(pre)_eq(a, b)  ( (a)->r == (b)->r && (a)->i == (b)->i )


#ifdef __cplusplus
extern "C" {
#endif

/* Prototypes for functions in @(mod_pre)complex.c */
void @(pre)_div(@(type) *, const @(type) *, const @(type) *);
double @(pre)_abs(@(type) *);     /* exact */
double @(pre)_abs1(@(type) *);    /* approximate */
void @(pre)_exp(@(type) *, @(type) *);
@precision SCOMPLEX
void r_cnjg(@(type) *, @(type) *);
double r_imag(@(type) *);
@precision DCOMPLEX
void d_cnjg(@(type) *r, @(type) *z);
double d_imag(@(type) *);
@precision !
@(type) @(pre)_sgn(@(type) *);
@(type) @(pre)_sqrt(@(type) *);


@precision REPLACED_BY_MACROS
void @(pre)_add(@(type) *, @(type) *, @(type) *);
void @(pre)_sub(@(type) *, @(type) *, @(type) *);
void @(pre)@(mod_pre)_mult(@(type) *, @(type) *, @(mod_type) *);
void @(pre)@(pre)_mult(@(type) *, @(type) *, @(type) *);
int @(pre)_eq(@(type) *, @(type) *);
@precision !

#ifdef __cplusplus
  }
#endif

#endif

#endif  /* __SUPERLU_@(MOD_PRE)COMPLEX */

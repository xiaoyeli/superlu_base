/*! \file
Copyright (c) 2003, The Regents of the University of California, through
Lawrence Berkeley National Laboratory (subject to receipt of any required 
approvals from U.S. Dept. of Energy) 

All rights reserved. 

The source code is distributed under BSD license, see the file License.txt
at the top-level directory.
*/
@extract -b Typedef.inc
/*! @file @(pre)lacon2.c
 * \brief Estimates the 1-norm
 *
 * <pre>
 * -- SuperLU routine (version 5.0) --
 * Univ. of California Berkeley, Xerox Palo Alto Research Center,
 * and Lawrence Berkeley National Lab.
 * July 24, 2022
 * </pre>
 */
#include <math.h>
#include "slu_Cnames.h"
@precision SCOMPLEX DCOMPLEX
#include "slu_@(mod_pre)complex.h"
@precision !

/*! \brief
 *
 * <pre>
 *   Purpose   
 *   =======   
 *
 *   @(PRE)LACON2 estimates the 1-norm of a square matrix A.   
 *   Reverse communication is used for evaluating matrix-vector products. 
 * 
 *   This is a thread safe version of CLACON, which uses the array ISAVE
 *   in place of a STATIC variables, as follows:
 *
 *     @(PRE)LACON     @(PRE)LACON2
 *      jump     isave[0]
 *      j        isave[1]
 *      iter     isave[2]
 *
 *
 *   Arguments   
 *   =========   
 *
 *   N      (input) INT
 *          The order of the matrix.  N >= 1.   
 *
 *   V      (workspace) @(TYPE) PRECISION array, dimension (N)   
 *          On the final return, V = A*W,  where  EST = norm(V)/norm(W)   
 *          (W is not returned).   
 *
 *   X      (input/output) @(TYPE) PRECISION array, dimension (N)   
 *          On an intermediate return, X should be overwritten by   
 *                A * X,   if KASE=1,   
 *                A' * X,  if KASE=2,
@precision SCOMPLEX DCOMPLEX
 *          where A' is the conjugate transpose of A,
@precision !
 *         and @(PRE)LACON must be re-called with all the other parameters   
 *          unchanged.   
 *
@precision SINGLE DOUBLE
 *   ISGN   (workspace) INT array, dimension (N)
@precision !
 *
 *   EST    (output) @(MOD_TYPE) PRECISION   
 *          An estimate (a lower bound) for norm(A).   
 *
 *   KASE   (input/output) INT
 *          On the initial call to @(PRE)LACON, KASE should be 0.   
 *          On an intermediate return, KASE will be 1 or 2, indicating   
 *          whether X should be overwritten by A * X  or A' * X.   
 *          On the final return from @(PRE)LACON, KASE will again be 0.   
 *
 *   isave  (input/output) int [3]
 *          ISAVE is INTEGER array, dimension (3)
 *          ISAVE is used to save variables between calls to @(PRE)LACON2
 *
 *   Further Details   
 *   ===============   
 *
 *   Contributed by Nick Higham, University of Manchester.   
 *   Originally named CONEST, dated March 16, 1988.   
 *
 *   Reference: N.J. Higham, "FORTRAN codes for estimating the one-norm of 
 *   a real or complex matrix, with applications to condition estimation", 
 *   ACM Trans. Math. Soft., vol. 14, no. 4, pp. 381-396, December 1988.   
 *   ===================================================================== 
 * </pre>
 */

int
@precision SINGLE DOUBLE
@(pre)lacon2_(int *n, @(type) *v, @(type) *x, int *isgn, @(type) *est, int *kase, int isave[3])
@precision SCOMPLEX DCOMPLEX
@(pre)lacon2_(int *n, @(type) *v, @(type) *x, @(mod_type) *est, int *kase, int isave[3])
@precision !
{
    /* Table of constant values */
    int c__1 = 1;
@precision SINGLE DOUBLE
    @(type)      zero = 0.0;
    @(type)      one = 1.0;
@precision SCOMPLEX DCOMPLEX
    @(type)      zero = {0.0, 0.0};
    @(type)      one = {1.0, 0.0};

    /* System generated locals */
    @(mod_type) d__1;
@precision !
    
    /* Local variables */
    int jlast;
    @(mod_type) altsgn, estold;
    int i;
    @(mod_type) temp;
@precision SCOMPLEX
    @(mod_type) safmin;
    extern float @(mod_pre)mach(char *);
@precision DCOMPLEX
    @(mod_type) safmin;
    extern double @(mod_pre)mach(char *);
@precision !
@precision SINGLE DOUBLE
#ifdef _CRAY
    extern int I@(SC_PRE)AMAX(int *, @(type) *, int *);
    extern @(type) @(SC_PRE)ASUM(int *, @(type) *, int *);
    extern int @(SC_PRE)COPY(int *, @(type) *, int *, @(type) *, int *);
#else
    extern int i@(pre)amax_(int *, @(type) *, int *);
    extern @(type) @(pre)asum_(int *, @(type) *, int *);
    extern int @(pre)copy_(int *, @(type) *, int *, @(type) *, int *);
#endif
@precision SCOMPLEX DCOMPLEX
    extern int i@(pre)max1_slu(int *, @(type) *, int *);
    extern double @(mod_pre)@(pre)sum1_slu(int *, @(type) *, int *);
    extern int @(pre)copy_(int *, @(type) *, int *, @(type) *, int *);
@precision ! 
@precision SINGLE DOUBLE
#define d_sign(a, b) (b >= 0 ? fabs(a) : -fabs(a))    /* Copy sign */
#define i_dnnt(a) \
	( a>=0 ? floor(a+.5) : -floor(.5-a) ) /* Round to nearest integer */
@precision !

@precision SCOMPLEX DCOMPLEX
    safmin = @(mod_pre)mach("Safe minimum");
@precision !
    if ( *kase == 0 ) {
	for (i = 0; i < *n; ++i) {
@precision SINGLE DOUBLE
	    x[i] = 1. / (@(mod_type)) (*n);
@precision SCOMPLEX DCOMPLEX
	    x[i].r = 1. / (@(mod_type)) (*n);
	    x[i].i = 0.;
@precision !	
	}
	*kase = 1;
	isave[0] = 1;	/* jump = 1; */
	return 0;
    }

    switch (isave[0]) {
	case 1:  goto L20;
	case 2:  goto L40;
	case 3:  goto L70;
	case 4:  goto L110;
	case 5:  goto L140;
    }

    /*     ................ ENTRY   (isave[0] == 1)   
	   FIRST ITERATION.  X HAS BEEN OVERWRITTEN BY A*X. */
  L20:
    if (*n == 1) {
	v[0] = x[0];
@precision SINGLE DOUBLE
	*est = fabs(v[0]);
@precision SCOMPLEX DCOMPLEX
	*est = @(pre)_abs(&v[0]);
@precision !
	/*        ... QUIT */
	goto L150;
    }
@precision SINGLE DOUBLE
#ifdef _CRAY
    *est = SASUM(n, x, &c__1);
#else
    *est = @(pre)asum_(n, x, &c__1);
#endif
@precision SCOMPLEX DCOMPLEX
    *est = @(mod_pre)@(pre)sum1_slu(n, x, &c__1);
@precision !

    for (i = 0; i < *n; ++i) {
@precision SINGLE DOUBLE
	x[i] = d_sign(one, x[i]);
	isgn[i] = i_dnnt(x[i]);
@precision SCOMPLEX DCOMPLEX
	d__1 = @(pre)_abs(&x[i]);
	if (d__1 > safmin) {
	    d__1 = 1 / d__1;
	    x[i].r *= d__1;
	    x[i].i *= d__1;
	} else {
	    x[i] = one;
	}
@precision !
    }
    *kase = 2;
    isave[0] = 2;  /* jump = 2; */
    return 0;

    /*     ................ ENTRY   (isave[0] == 2)   
	   FIRST ITERATION.  X HAS BEEN OVERWRITTEN BY TRANSPOSE(A)*X. */
L40:
@precision SINGLE DOUBLE
#ifdef _CRAY
    isave[1] = ISAMAX(n, &x[0], &c__1);  /* j */
#else
    isave[1] = i@(pre)amax_(n, &x[0], &c__1);  /* j */
#endif
@precision SCOMPLEX DCOMPLEX
    isave[1] = i@(pre)max1_slu(n, &x[0], &c__1);  /* j */
@precision !
    --isave[1];  /* --j; */
    isave[2] = 2; /* iter = 2; */

    /*     MAIN LOOP - ITERATIONS 2,3,...,ITMAX. */
L50:
    for (i = 0; i < *n; ++i) x[i] = zero;
    x[isave[1]] = one;
    *kase = 1;
    isave[0] = 3;  /* jump = 3; */
    return 0;

    /*     ................ ENTRY   (isave[0] == 3)   
	   X HAS BEEN OVERWRITTEN BY A*X. */
L70:
#ifdef _CRAY
    @(SC_PRE)COPY(n, x, &c__1, v, &c__1);
#else
    @(pre)copy_(n, x, &c__1, v, &c__1);
#endif
    estold = *est;
@precision SINGLE DOUBLE
#ifdef _CRAY
    *est = SASUM(n, v, &c__1);
#else
    *est = @(pre)asum_(n, v, &c__1);
#endif
@precision SCOMPLEX DCOMPLEX
    *est = @(mod_pre)@(pre)sum1_slu(n, v, &c__1);
@precision !

@precision SINGLE DOUBLE
    for (i = 0; i < *n; ++i)
	if (i_dnnt(d_sign(one, x[i])) != isgn[i])
	    goto L90;

    /*     REPEATED SIGN VECTOR DETECTED, HENCE ALGORITHM HAS CONVERGED. */
    goto L120;
@precision !

L90:
    /*     TEST FOR CYCLING. */
    if (*est <= estold) goto L120;

    for (i = 0; i < *n; ++i) {
@precision SINGLE DOUBLE
	x[i] = d_sign(one, x[i]);
	isgn[i] = i_dnnt(x[i]);
@precision SCOMPLEX DCOMPLEX
	d__1 = @(pre)_abs(&x[i]);
	if (d__1 > safmin) {
	    d__1 = 1 / d__1;
	    x[i].r *= d__1;
	    x[i].i *= d__1;
	} else {
	    x[i] = one;
	}
@precision !
    }
    *kase = 2;
    isave[0] = 4;  /* jump = 4; */
    return 0;

    /*     ................ ENTRY   (isave[0] == 4)
	   X HAS BEEN OVERWRITTEN BY TRANDPOSE(A)*X. */
L110:
    jlast = isave[1];  /* j; */
@precision SINGLE DOUBLE
#ifdef _CRAY
    isave[1] = ISAMAX(n, &x[0], &c__1);/* j */
#else
    isave[1] = i@(pre)amax_(n, &x[0], &c__1);  /* j */
#endif
@precision SCOMPLEX DCOMPLEX
    isave[1] = i@(pre)max1_slu(n, &x[0], &c__1); /* j */
@precision !
    isave[1] = isave[1] - 1;  /* --j; */
@precision SINGLE DOUBLE
    if (x[jlast] != fabs(x[isave[1]]) && isave[2] < 5) {
@precision SCOMPLEX DCOMPLEX
    if (x[jlast].r != (d__1 = x[isave[1]].r, fabs(d__1)) && isave[2] < 5) {
@precision !
	isave[2] = isave[2] + 1;  /* ++iter; */
	goto L50;
    }

    /*     ITERATION COMPLETE.  FINAL STAGE. */
L120:
    altsgn = 1.;
    for (i = 1; i <= *n; ++i) {
@precision SINGLE DOUBLE
	x[i-1] = altsgn * ((@(mod_type))(i - 1) / (@(mod_type))(*n - 1) + 1.);
@precision SCOMPLEX DCOMPLEX
	x[i-1].r = altsgn * ((@(mod_type))(i - 1) / (@(mod_type))(*n - 1) + 1.);
	x[i-1].i = 0.;
@precision !
	altsgn = -altsgn;
    }
    *kase = 1;
    isave[0] = 5;  /* jump = 5; */
    return 0;
    
    /*     ................ ENTRY   (isave[0] = 5)   
	   X HAS BEEN OVERWRITTEN BY A*X. */
L140:
@precision SINGLE DOUBLE
#ifdef _CRAY
    temp = SASUM(n, x, &c__1) / (@(mod_type))(*n * 3) * 2.;
#else
    temp = @(pre)asum_(n, x, &c__1) / (@(mod_type))(*n * 3) * 2.;
#endif
@precision SCOMPLEX DCOMPLEX
    temp = @(mod_pre)@(pre)sum1_slu(n, x, &c__1) / (@(mod_type))(*n * 3) * 2.;
@precision !
    if (temp > *est) {
#ifdef _CRAY
	@(SC_PRE)COPY(n, &x[0], &c__1, &v[0], &c__1);
#else
	@(pre)copy_(n, &x[0], &c__1, &v[0], &c__1);
#endif
	*est = temp;
    }

L150:
    *kase = 0;
    return 0;

} /* @(pre)lacon2_ */

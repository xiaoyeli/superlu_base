@extract -b Typedef.inc
/*
 * -- SuperLU routine (version 2.0) --
 * Univ. of California Berkeley, Xerox Palo Alto Research Center,
 * and Lawrence Berkeley National Lab.
 * November 15, 1997
 *
 */
#ifndef __SUPERLU_@(pre)SP_DEFS /* allow multiple inclusions */
#define __SUPERLU_@(pre)SP_DEFS

/*
 * File name:		@(pre)sp_defs.h
 * Purpose:             Sparse matrix types and function prototypes
 * History:
 */
#ifdef _CRAY
#include <fortran.h>
#include <string.h>
#endif
#include "Cnames.h"
#include "supermatrix.h"
@precision DCOMPLEX SCOMPLEX
#include "@(mod_pre)complex.h"
@precision !


/* No of marker arrays used in the symbolic factorization,
   each of size n */
#define NO_MARKER     3
#define NUM_TEMPV(m,w,t,b)  ( MAX(m, (t + b)*w) )

typedef enum {LUSUP, UCOL, LSUB, USUB} MemType;
typedef enum {HEAD, TAIL}              stack_end_t;
typedef enum {SYSTEM, USER}            LU_space_t;

/*
 * Global data structures used in LU factorization -
 * 
 *   nsuper: #supernodes = nsuper + 1, numbered [0, nsuper].
 *   (xsup,supno): supno[i] is the supernode no to which i belongs;
 *	xsup(s) points to the beginning of the s-th supernode.
 *	e.g.   supno 0 1 2 2 3 3 3 4 4 4 4 4   (n=12)
 *	        xsup 0 1 2 4 7 12
 *	Note: dfs will be performed on supernode rep. relative to the new 
 *	      row pivoting ordering
 *
 *   (xlsub,lsub): lsub[*] contains the compressed subscript of
 *	rectangular supernodes; xlsub[j] points to the starting
 *	location of the j-th column in lsub[*]. Note that xlsub 
 *	is indexed by column.
 *	Storage: original row subscripts
 *
 *      During the course of sparse LU factorization, we also use
 *	(xlsub,lsub) for the purpose of symmetric pruning. For each
 *	supernode {s,s+1,...,t=s+r} with first column s and last
 *	column t, the subscript set
 *		lsub[j], j=xlsub[s], .., xlsub[s+1]-1
 *	is the structure of column s (i.e. structure of this supernode).
 *	It is used for the storage of numerical values.
 *	Furthermore,
 *		lsub[j], j=xlsub[t], .., xlsub[t+1]-1
 *	is the structure of the last column t of this supernode.
 *	It is for the purpose of symmetric pruning. Therefore, the
 *	structural subscripts can be rearranged without making physical
 *	interchanges among the numerical values.
 *
 *	However, if the supernode has only one column, then we
 *	only keep one set of subscripts. For any subscript interchange
 *	performed, similar interchange must be done on the numerical
 *	values.
 *
 *	The last column structures (for pruning) will be removed
 *	after the numercial LU factorization phase.
 *
 *   (xlusup,lusup): lusup[*] contains the numerical values of the
 *	rectangular supernodes; xlusup[j] points to the starting
 *	location of the j-th column in storage vector lusup[*]
 *	Note: xlusup is indexed by column.
 *	Each rectangular supernode is stored by column-major
 *	scheme, consistent with Fortran 2-dim array storage.
 *
 *   (xusub,ucol,usub): ucol[*] stores the numerical values of
 *	U-columns outside the rectangular supernodes. The row
 *	subscript of nonzero ucol[k] is stored in usub[k].
 *	xusub[i] points to the starting location of column i in ucol.
 *	Storage: new row subscripts; that is subscripts of PA.
 */
typedef struct {
    int     *xsup;    /* supernode and column mapping */
    int     *supno;   
    int     *lsub;    /* compressed L subscripts */
    int	    *xlsub;
    @(type)  *lusup;   /* L supernodes */
    int     *xlusup;
    @(type)  *ucol;    /* U columns */
    int     *usub;
    int	    *xusub;
    int     nzlmax;   /* current max size of lsub */
    int     nzumax;   /*    "    "    "      ucol */
    int     nzlumax;  /*    "    "    "     lusup */
    int     n;        /* number of columns in the matrix */
    LU_space_t MemModel; /* 0 - system malloc'd; 1 - user provided */
} GlobalLU_t;

typedef struct {
    int panel_size;
    int relax;
    @(mod_type) diag_pivot_thresh;
    @(mod_type) drop_tol;
} factor_param_t;

typedef struct {
    float for_lu;
    float total_needed;
    int   expansions;
} mem_usage_t;

#ifdef __cplusplus
extern "C" {
#endif

/* Driver routines */
extern void
@(pre)gssv(SuperMatrix *, int *, int *, SuperMatrix *, SuperMatrix *, 
	SuperMatrix *, int *);
extern void
@(pre)gssvx(char *, char *, char *, SuperMatrix *, factor_param_t *,
       int *, int *, int *, char *, @(mod_type) *, @(mod_type) *,
       SuperMatrix *, SuperMatrix *, void *, int, SuperMatrix *, 
       SuperMatrix *, @(mod_type) *, @(mod_type) *, @(mod_type) *,
       @(mod_type) *, mem_usage_t *, int *);

/* Supernodal LU factor related */
extern void
@(pre)Create_CompCol_Matrix(SuperMatrix *, int, int, int, @(type) *,
		       int *, int *, Stype_t, Dtype_t, Mtype_t);
extern void
@(pre)Copy_CompCol_Matrix(SuperMatrix *, SuperMatrix *);
extern void
@(pre)Create_Dense_Matrix(SuperMatrix *, int, int, @(type) *, int,
		     Stype_t, Dtype_t, Mtype_t);
extern void
@(pre)Create_SuperNode_Matrix(SuperMatrix *, int, int, int, @(type) *, 
		         int *, int *, int *, int *, int *,
			 Stype_t, Dtype_t, Mtype_t);
extern void
@(pre)Copy_Dense_Matrix(int, int, @(type) *, int, @(type) *, int);

extern void    Destroy_SuperMatrix_Store(SuperMatrix *);
extern void    Destroy_CompCol_Matrix(SuperMatrix *);
extern void    Destroy_SuperNode_Matrix(SuperMatrix *);
extern void    Destroy_CompCol_Permuted(SuperMatrix *);
extern void    Destroy_Dense_Matrix(SuperMatrix *);
extern void    get_perm_c(int, SuperMatrix *, int *);
extern void    sp_preorder (char*, SuperMatrix*, int*, int*, SuperMatrix*);
extern void    countnz (const int, int *, int *, int *, GlobalLU_t *);
extern void    fixupL (const int, const int *, GlobalLU_t *);

extern void    @(pre)allocateA (int, int, @(type) **, int **, int **);
@precision SINGLE SCOMPLEX
extern void    @(pre)gstrf (char*, SuperMatrix*, float, float, int, int, int*,
@precision DOUBLE DCOMPLEX
extern void    @(pre)gstrf (char*, SuperMatrix*, double, double, int, int, int*,
@precision !
			void *, int, int *, int *, 
                        SuperMatrix *, SuperMatrix *, int *);
extern int     @(pre)snode_dfs (const int, const int, const int *, const int *,
			     const int *, int *, int *, GlobalLU_t *);
extern int     @(pre)snode_bmod (const int, const int, const int, @(type) *,
                              @(type) *, GlobalLU_t *);
extern void    @(pre)panel_dfs (const int, const int, const int, SuperMatrix *,
			   int *, int *, @(type) *, int *, int *, int *,
			   int *, int *, int *, int *, GlobalLU_t *);
extern void    @(pre)panel_bmod (const int, const int, const int, const int,
                           @(type) *, @(type) *, int *, int *,
			   GlobalLU_t *);
extern int     @(pre)column_dfs (const int, const int, int *, int *, int *, int *,
			   int *, int *, int *, int *, int *, GlobalLU_t *);
extern int     @(pre)column_bmod (const int, const int, @(type) *,
			   @(type) *, int *, int *, int, GlobalLU_t *);
extern int     @(pre)copy_to_ucol (int, int, int *, int *, int *,
                              @(type) *, GlobalLU_t *);         
@precision SINGLE SCOMPLEX
extern int     @(pre)pivotL (const int, const float, int *, int *, 
                              int *, int *, int *, GlobalLU_t *);
@precision DOUBLE DCOMPLEX
extern int     @(pre)pivotL (const int, const double, int *, int *, 
                              int *, int *, int *, GlobalLU_t *);
@precision !
extern void    @(pre)pruneL (const int, const int *, const int, const int,
			     const int *, const int *, int *, GlobalLU_t *);
extern void    @(pre)readmt (int *, int *, int *, @(type) **, int **, int **);
extern void    @(pre)GenXtrue (int, int, @(type) *, int);
extern void    @(pre)FillRHS (char *, int, @(type) *, int, SuperMatrix *,
			SuperMatrix *);
extern void    @(pre)gstrs (char *, SuperMatrix *, SuperMatrix *, int *, int *,
			SuperMatrix *, int *);


/* Driver related */

@precision SINGLE SCOMPLEX
extern void    @(pre)gsequ (SuperMatrix *, float *, float *, float *,
			     float *, float *, int *);
extern void    @(pre)laqgs (SuperMatrix *, float *, float *, float,
                             float, float, char *);
extern void    @(pre)gscon (char *, SuperMatrix *, SuperMatrix *, 
			float, float *, int *);
extern float   @(pre)PivotGrowth(int, SuperMatrix *, int *, 
                            SuperMatrix *, SuperMatrix *);
extern void    @(pre)gsrfs (char *, SuperMatrix *, SuperMatrix *,
			SuperMatrix *, int *, int *, char *, float *, 
			float *, SuperMatrix *, SuperMatrix *, float *,
			float *, int *);
@precision DOUBLE DCOMPLEX
extern void    @(pre)gsequ (SuperMatrix *, double *, double *, double *,
			     double *, double *, int *);
extern void    @(pre)laqgs (SuperMatrix *, double *, double *, double,
                             double, double, char *);
extern void    @(pre)gscon (char *, SuperMatrix *, SuperMatrix *,
			double, double *, int *);
extern double  @(pre)PivotGrowth(int, SuperMatrix *, int *, 
                            SuperMatrix *, SuperMatrix *);
extern void    @(pre)gsrfs (char *, SuperMatrix *, SuperMatrix *, 
			SuperMatrix *, int *, int *, char *, double *,
			double *, SuperMatrix *, SuperMatrix *, 
			double *, double *, int *);
@precision !

extern int     sp_@(pre)trsv (char *, char *, char *, SuperMatrix *,
			SuperMatrix *, @(type) *, int *);
extern int     sp_@(pre)gemv (char *, @(type), SuperMatrix *, @(type) *,
			int, @(type), @(type) *, int);

extern int     sp_@(pre)gemm (char *, char *, int, int, int, @(type),
			SuperMatrix *, @(type) *, int, @(type), 
			@(type) *, int);

/* Memory-related */
extern int     @(pre)LUMemInit (char *, void *, int, int, int, int, int,
			     SuperMatrix *, SuperMatrix *,
			     GlobalLU_t *, int **, @(type) **);
extern void    @(pre)SetRWork (int, int, @(type) *, @(type) **, @(type) **);
extern void    @(pre)LUWorkFree (int *, @(type) *, GlobalLU_t *);
extern int     @(pre)LUMemXpand (int, int, MemType, int *, GlobalLU_t *);

extern @(type)  *@(type)Malloc(int);
extern @(type)  *@(type)Calloc(int);
@precision SCOMPLEX
extern float  *floatMalloc(int);
extern float  *floatCalloc(int);
@precision DCOMPLEX
extern double  *doubleMalloc(int);
extern double  *doubleCalloc(int);
@precision !
extern int     @(pre)memory_usage(const int, const int, const int, const int);
extern int     @(pre)QuerySpace (SuperMatrix *, SuperMatrix *, int,
				mem_usage_t *);

/* Auxiliary routines */
extern void    @(pre)readhb(int *, int *, int *, @(type) **, int **, int **);
extern void    @(pre)CompRow_to_CompCol(int, int, int, @(type)*, int*, int*,
		                   @(type) **, int **, int **);
extern void    @(pre)fill (@(type) *, int, @(type));
extern void    @(pre)inf_norm_error (int, SuperMatrix *, @(type) *);
extern void    PrintPerf (SuperMatrix *, SuperMatrix *, mem_usage_t *,
			 @(type), @(type), @(type) *, @(type) *, char *);

/* Routines for debugging */
extern void    @(pre)Print_CompCol_Matrix(char *, SuperMatrix *);
extern void    @(pre)Print_SuperNode_Matrix(char *, SuperMatrix *);
extern void    @(pre)Print_Dense_Matrix(char *, SuperMatrix *);
extern void    print_lu_col(char *, int, int, int *, GlobalLU_t *);
extern void    check_tempv(int, @(type) *);

#ifdef __cplusplus
  }
#endif

#endif /* __SUPERLU_@(pre)SP_DEFS */

